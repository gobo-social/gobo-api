shards:
  id: &id
    id:
      description: The unique identifier for this resource.
      type: integer

  string_id: &string_id
    id:
      description: The unique identifier for this resource.
      type: string

  person_id: &person_id
    person_id:
      description: The unique ID for the person that owns this resource.
      type: integer

  timestamp: &timestamp
    created:
      description: The ISO 8601 timestamp this resource was created.
      type: string
    updated:
      description: The ISO 8601 timestamp this resource was updated.
      type: string

  platform: &platform
    platform:
      description: The name of the host provider associated with this resource
      type: string
      enum:
        - bluesky
        - linkedin
        - mastodon
        - reddit
        - smalltown

  linkCore: &linkCore
    origin_type:
      description: The type of resource that represents the origin of this edge.
      type: string
    origin_id:
      description: The unique identifier for the resource.
      type: integer
    target_type:
      description: The type of resource that represents the target of this edge.
      type: string
    target_id:
      description: The uniuqe identifier for the resource.
      type: integer
    name:
      description: The name that describes the type of edge between these resources.
      type: string
    secondary:
      description: A secondary dimension projected into this edge, suitable for sorting a given family of edges.
      type: string

  link: &link
    type: object
    additionalProperties: false
    required: [ id, origin_type, origin_id, target_type, target_id, name ]
    properties:
      <<: *id
      <<: *linkCore
      <<: *timestamp

  taskCore: &taskCore
    queue:
      description: The name of the queue family that should handle this task.
      type: string
    name:
      description: The name describing this task operation.
      type: string
    priority:
      type: integer
      minimum: 1
    details:
      description: The payload of information relevant to completing this task.
      type: object

  task: &task
    type: object
    additionalProperties: false
    required: [id]
    properties:
      <<: *id
      <<: *taskCore
      <<: *timestamp


  personCore: &personCore
    person_id:
      description: optional representation of the person id.
      type: integer
    name:
      description: Chosen display name for this person.
      type: string
    authority_id:
      description: The unique identifier for this person within the authentication authority
      type: string

  person: &person
    type: object
    additionalProperties: false
    required: [ id ]
    properties:
      <<: *id
      <<: *personCore
      <<: *timestamp

  storeCore: &storeCore
    <<: *person_id
    name:
      type: string
    content:
      type: object

  store: &store
    type: object
    additionalProperties: false
    properties:
      <<: *id
      <<: *storeCore
      <<: *timestamp

  identityCore: &identityCore
    <<: *person_id
    <<: *platform
    platform_id:
      description: The unique ID for this identity on the host provider.
      type: string
    base_url:
      description: The base URL of the service provider of this identity.
      type: string
    profile_url:
      description: The URL pointing to this identity on the host provider.
      type: string
    profile_image:
      description: The URL pointing to this idenity profile picture on the host provider.
      type: string
    username:
      description: The username associated with this identity.
      type: string
    name:
      description: The display name associated with this identity.
      type: string
    oauth_token:
      description: The OAuth token associated with this identity.
      type: string
    oauth_token_secret:
      description: The OAuth secret token associated with this identity access.
      type: string
    active:
      description: This flag provides a hint as to the visibility of posts from this identity in certain feeds.
      type: boolean

  identity: &identity
    type: object
    additionalProperties: false
    required: [id, person_id, platform, base_url, profile_url, username]
    properties:
      <<: *id
      <<: *identityCore
      <<: *timestamp

  registrationCore: &registrationCore
    <<: *person_id
    <<: *platform
    base_url:
      description: The base URL of the service provider of this registration.
      type: string
    oauth_token:
      description: The OAuth token associated with this registration.
      type: string
    oauth_token_secret:
      description: The OAuth secret token associated with this registration access.
      type: string
    state:
      description: The current state of the registration.
      type: string
   
  
  registration: &registration
    type: object
    additionalProperties: false
    required: [id, person_id, platform, base_url]
    properties:
      <<: *id
      <<: *registrationCore
      <<: *timestamp

  mastodonClientCore: &mastodonClientCore
    base_url:
      description: The base URL of the service provider of this Mastodon client.
      type: string
    client_id:
      description: The OAuth client ID associated with this client.
      type: string
    client_secret:
      description: The OAuth client secret associated with this client.
      type: string   
  
  mastodonClient: &mastodonClient
    type: object
    additionalProperties: false
    required: [id, base_url]
    properties:
      <<: *id
      <<: *mastodonClientCore
      <<: *timestamp

  filterCore: &filterCore
    <<: *person_id
    category:
      description: Describes the type of filter and controls how it acts on the feed
      type: string
    active:
      description: This flag provides a hint as to this filter effect on a given feed.
      type: boolean
    configuration:
      description: Description of a given filter configuration. Varies based on filter category.
      type: object

  filter: &filter
    type: object
    additionalProperties: false
    required: [ id, person_id ]
    properties:
      <<: *id
      <<: *filterCore
      <<: *timestamp

  sourceCore: &sourceCore
    <<: *platform
    platform_id:
      description: The ID of this entity within the given platform.
      type: string
    base_url:
      description: The base URL of the source, pointing to its platform
      type: string
    url:
      description: The full, unique URL for this source
      type: string
    username:
      description: The platform unique name for a source
      type: string
    name:
      description: The platform display name for a source
      type: string
    icon_url:
      type: string
    active:
      description: Flag to control whether this source is actively used to build feeds.
      type: boolean
    stash:
      description: Stores extra-dimensional data for convenience.
      type: object

  source: &source
    type: object
    additionalProperties: false
    required: [ id, platform ]
    properties:
      <<: *id
      <<: *sourceCore
      <<: *timestamp


  postCore: &postCore
    <<: *platform
    source_id:
      description: The unique ID of the source for this post.
      type: integer
    base_url:
      description: The base URL for the platform that hosts this post.
      type: string
    platform_id:
      description: The ID of this post, unique to the platform that hosts it.
      type: string
    title:
      type: string
    content:
      type: string
    url:
      description: The URL of the original post, hosted by the platform
      type: string
    visibility:
      description: Describes how publicly visible this post is
      type: string
    published:
      description: The ISO 8601 timestamp this post was published on the host platform.
      type: string
    attachments:
      description: List of URLs where you can find media attachments for this post.
      type: array
      items: 
        type: object
    poll:
      description: Data related to a poll attached to this post. Contains the timestamp for the poll ending and data on the vote tally when last fetch.
      type: object

  post: &post
    type: object
    additionalProperties: false
    required: [ id, platform ]
    properties:
      <<: *id
      <<: *postCore
      <<: *timestamp

  fileCore: &fileCore    
    id:
      description: Unqiue identifier for the uploaded file to GOBO cross-posting
      type: string
    person_id:
      description: The ID of the person this draft file is associated with.
      type: integer
    mime_type:
      description: MIME type of this file
      type: string
    name:
      description: Provided name for this file.
      type: string
    filename:
      description: Provided name for this file, with extension.
      type: string
    alt:
      description: Provided alt text for files, for example images and video.
    state:
      description: Describes the current condition of the file with regard to upload or association.
      type: string
    size:
      description: The size of the file, in bytes.
      type: integer
    published:
      description: DEPRECATED flag indicated whether this file has been used in a post publish task
      type: boolean

  file: &file
    type: object
    additionalProperties: false
    required: [ id, person_id ]
    properties:
      <<: *fileCore
      <<: *timestamp

  draftCore: &draftCore
    person_id:
      description: The ID of the person this draft is associated with.
      type: integer
    state:
      description: The current state of the draft to model its internal process flow.
      type: string
    store:
      description: The client's representation of the draft state. Gobo's HTTP takes a hands-off approach to the concerns of this particular resource.
      type: object


  draft: &draft
    type: object
    additionalProperties: false
    required: [ id, person_id, store ]
    properties:
      <<: *id
      <<: *draftCore
      <<: *timestamp

  proofCore: &proofCore
    person_id:
      description: The ID of the person associated with this proof.
      type: integer
    title:
      description: The title of the to-be-published post.
      type: string
    content:
      description: The main content of the to-be-published post.
      type: string
    thread:
      description: Associative array of thread projected into posts for each platform.
      type: array
    files:
      description: List of draft file IDs to provide as files in the final post.
      type: array
      items: 
        type: string
    poll:
      description: Data related to a poll attached to this post. Contains the timestamp for the poll ending and data on the vote tally when last fetch.
      type: object
    state:
      description: The current lifecycle state of the proof.
      type: string

  proof: &proof
    type: object
    additionalProperties: false
    required: [ id, person_id, content, files ]
    properties:
      <<: *id
      <<: *proofCore
      <<: *timestamp

  deliveryTargetCore: &deliveryTargetCore         
    person_id:
      description: The ID of the person associated with this delivery target.
      type: integer
    identity_id:
      description: The ID of the target identity Gobo is trying to submit to.
      type: integer
    delivery_id:
      description: The ID of delivery this target is associated with.
      type: integer
    state:
      description: The current state of the submission process.
      type: string
    stash:
      description: Platform specific status information. Its shape is kept flexible to support different platforms, but it's primarily concerend with dealing with errors.
      type: object

  deliveryTarget: &deliveryTarget
    type: object
    additionalProperties: false
    required: [ id, person_id, identity, state ]
    properties:
      <<: *id
      <<: *deliveryTargetCore
      <<: *timestamp

  deliveryCore: &deliveryCore
    person_id:
      description: The ID of the person this delivery is associated with.
      type: integer
    draft_id:
      description: The ID of the draft associated with this delivery.
      type: integer
    proof_id:
      description: The ID of the proof associated with this delivery.
      type: integer
    targets:
      description: List of IDs referencing delivery targets associated with this delivery.
      type: array
      items:
        type: integer

  delivery: &delivery
    type: object
    additionalProperties: false
    required: [ id, person_id, draft_id, files, targets ]
    properties:
      <<: *id
      <<: *deliveryCore
      <<: *timestamp
  

  deliveryGraph: &deliveryGraph
    type: object
    additionalProperties: false
    required: [ feed, deliveries, drafts, files, targets ]
    properties:
      feed:
        description: List of delivery IDs, sorted in reverse chronological order.
        type: array
        items:
          type: integer
      deliveries:
        description: List of delivery resources associated with this graph.
        type: array
        items: *delivery
      proofs:
        description: List of proof resources associated with this graph.
        type: array
        items: *proof
      drafts:
        description: List of draft resources associated with this graph.
        type: array
        items: *draft
      files:
        description: List of draft file resources associated with this graph.
        type: array
        items: *file
      targets:
        description: List of delivery target resources associated with this graph.
        type: array
        items: *deliveryTarget
      next:
        description: token that allows the client to fetch the next page fo the feed.
        type: string


  newPost: &newPost
    type: object
    additionalProperties: false
    required: [ delivery_id, targets ]
    properties:
      delivery_id:
        description: The ID of the associated delivery resource used to orchestrate platform integrations.
        type: integer
      targets:
        type: array
        minItems: 1
        items:
          type: object
          additionalProperties: false
          required: [ identity ]
          properties:
            identity:
              description: The ID of the target identity. GOBO will create a post on your behalf with this provider.
              type: integer
            stash:
              description: Platform specific configuration needed to create this post. For example, a target subreddit.
              type: array
              items:
                type: object




  goboKeyCore: &goboKeyCore
    person_id:
      description: The ID of the person to whom this key is assigned.
      type: integer
    key:
      description: The value of this key.
      type: string

  goboKey: &goboKey
    type: object
    additionalProperties: false
    required: [ id ]
    properties:
      <<: *id
      <<: *goboKeyCore
      <<: *timestamp


  notificationCore: &notificationCore
    <<: *platform
    base_url:
      description: The base URL for the platform that hosts this notification.
      type: string
    platform_id:
      description: The ID of this notification, unique to the platform that hosts it.
      type: string
    content:
      type: string
    type:
      description: The notification type that describes the purpose of this notification.
      type: string
    notified:
      description: The ISO 8601 timestamp this notification was registered on the host platform.
      type: string
    source_id:
      description: The unique Gobo ID of the source associated with this notification.
      type: integer
    post_id:
      description: The unique Gobo ID of the post associated with this notification.
      type: integer
    active:
      description: Describes whether this notification is unread or has been dismissed.
      type: boolean

  notification: &notification
    type: object
    additionalProperties: false
    required: [ id, platform ]
    properties:
      <<: *id
      <<: *notificationCore
      <<: *timestamp

  notificationCountCore: &notificationCountCore
    person_id:
      description: The unique Gobo ID of the person to whom this notification count belongs.
      type: integer
    count:
      description: The current estimated count of unread notifications belonging to this person across all their identities.
      type: integer
      minimum: 0
      maximum: 10000

  notificationCount: &notificationCount
    type: object
    additionalProperties: false
    required: [ person_id, count ]
    properties:
      <<: *notificationCountCore
      <<: *timestamp


resources:
  discovery:
    template: /
    route: /
    methods:
      get:
        request:
          authorization: [ public ]
        response:
          type: application/json
          status: 200

  links:
    template: /links{?view,direction,per_page,page,origin_type,origin_id,target_type,target_id,name}
    route: /links
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [ origin_type, origin_id, target_type, target_id, name ]
            properties: *linkCore
        response:
          type: application/json
          schema: *link
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *link


  link:
    template: /links/{id}
    route: /links/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *link

      put:
        request:
          type: application/json
          schema: *link
        response:
          type: application/json
          status: 200
          schema: *link

      delete:
        request: {}
        response:
          status: 204


  tasks:
    template: /tasks{?view,direction,per_page,page}
    route: /tasks
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *taskCore
        response:
          type: application/json
          schema: *task
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *task


  task:
    template: /tasks/{id}
    route: /tasks/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *task

      put:
        request:
          type: application/json
          schema: *task
        response:
          type: application/json
          status: 200
          schema: *task

      delete:
        request: {}
        response:
          status: 204


  people:
    template: /people{?view,direction,per_page,page}
    route: /people
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *personCore
        response:
          type: application/json
          schema: *person
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *person


  person:
    template: /people/{id}
    route: /people/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *person

      put:
        request:
          type: application/json
          schema: *person
        response:
          type: application/json
          status: 200
          schema: *person

      delete:
        request: {}
        response:
          status: 204


  identities:
    template: /identities{?view,direction,per_page,page}
    route: /identities
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [person_id, base_url, username, profile_url]
            properties: *identityCore
        response:
          type: application/json
          schema: *identity
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *identity


  identity:
    template: /identities/{id}
    route: /identities/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *identity

      put:
        request:
          type: application/json
          schema: *identity
        response:
          type: application/json
          status: 200
          schema: *identity

      delete:
        request: {}
        response:
          status: 204

  registrations:
    template: /registrations{?view,direction,per_page,page}
    route: /registrations
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [person_id, base_url]
            properties: *registrationCore
        response:
          type: application/json
          schema: *registration
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *registration


  registration:
    template: /registrations/{id}
    route: /registrations/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *registration

      put:
        request:
          type: application/json
          schema: *registration
        response:
          type: application/json
          status: 200
          schema: *registration

      delete:
        request: {}
        response:
          status: 204


  mastodon_clients:
    template: /mastodon_clients{?view,direction,per_page,page}
    route: /mastodon_clients
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *mastodonClientCore
        response:
          type: application/json
          schema: *mastodonClient
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *mastodonClient


  mastodon_client:
    template: /mastodon_clients/{id}
    route: /mastodon_clients/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *mastodonClient

      put:
        request:
          type: application/json
          schema: *mastodonClient
        response:
          type: application/json
          status: 200
          schema: *mastodonClient

      delete:
        request: {}
        response:
          status: 204

  filters:
    template: /filters{?view,direction,per_page,page}
    route: /filters
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *filterCore
        response:
          type: application/json
          schema: *filter
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *filter


  filter:
    template: /filters/{id}
    route: /filters/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *filter

      put:
        request:
          type: application/json
          schema: *filter
        response:
          type: application/json
          status: 200
          schema: *filter

      delete:
        request: {}
        response:
          status: 204

  sources:
    template: /sources{?view,direction,per_page,page}
    route: /sources
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *sourceCore
        response:
          type: application/json
          schema: *source
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *source


  source:
    template: /source/{id}
    route: /source/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *source

      put:
        request:
          type: application/json
          schema: *source
        response:
          type: application/json
          status: 200
          schema: *source

      delete:
        request: {}
        response:
          status: 204

  posts:
    template: /posts{?view,direction,per_page,page}
    route: /posts
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *postCore
        response:
          type: application/json
          schema: *post
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *post


  post:
    template: /post/{id}
    route: /post/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *post

      put:
        request:
          type: application/json
          schema: *post
        response:
          type: application/json
          status: 200
          schema: *post

      delete:
        request: {}
        response:
          status: 204

  me:
    template: /auth/me
    route: /auth/me
    methods:
      get:
        request:
          authorization:
            - general
            - gobo-key
        response:
          type: application/json
          status: 200
          schema: *person

      put:
        request:
          type: application/json
          schema: *person
        response:
          type: application/json
          status: 200
          schema: *person

  gobo_keys:
    template: /gobo-keys{?view,direction,per_page,page}
    route: /gobo-keys
    methods:
      post:
        request:
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *goboKeyCore
        response:
          type: application/json
          schema: *goboKey
          status: 201

      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *goboKey


  gobo_key:
    template: /gobo-keys/{id}
    route: /gobo-keys/<int:id>
    methods:
      get:
        request: {}
        response:
          type: application/json
          status: 200
          schema: *goboKey

      put:
        request:
          type: application/json
          schema: *goboKey
        response:
          type: application/json
          status: 200
          schema: *goboKey

      delete:
        request: {}
        response:
          status: 204

  person_profile:
    template: /people/{person_id}/person
    route: /people/<int:person_id>/person
    methods:
      get:
        request:
          authorization:
            - person
        response:
          type: application/json
          status: 200
          schema: *person

      put:
        request:
          authorization:
            - person
          type: application/json
          schema: *person
        response:
          type: application/json
          status: 200
          schema: *person

  person_store:
    template: /people/{person_id}/stores/{name}
    route: /people/<int:person_id>/stores/<name>
    methods:
      get:
        request:
          authorization:
            - person
        response:
          status: 200
          type: application/json
          schema: *store

      delete:
        request: {}
        response:
          status: 204

      put:
        request:
          authorization:
            - person
          type: application/json
          schema: *store
        response:
          status: 200
          type: application/json
          schema: *store

  person_identities:
    template: /people/{person_id}/identities{?per_page,page}
    route: /people/<int:person_id>/identities
    methods:
      get:
        request:
          authorization:
            - person
            - gobo-key
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *identity

  person_identity:
    template: /people/{person_id}/identities/{id}
    route: /people/<int:person_id>/identities/<int:id>
    methods:
      post:
        request:
          authorization:
            - person
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [ active ]
            properties:
              active:
                description: Controls the visibility of the feed emenating from this identity in the full feed.
                type: boolean
        response:
          status: 200
          type: application/json
          schema: *identity

      get:
        request:
          authorization:
            - person
        response:
          status: 200
          type: application/json
          schema: *identity

      delete:
        request:
          authorization:
            - person
        response:
          status: 204

  person_filters:
    template: /people/{person_id}/filters{?per_page,page}
    route: /people/<int:person_id>/filters
    methods:
      get:
        request:
          authorization:
            - person
            - gobo-key
        response:
          type: application/json
          status: 200
          schema:
            type: array
            items: *filter

      post:
        request:
          authorization:
            - person
            - gobo-key
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties: *filterCore
        response:
          type: application/json
          status: 201
          schema: *filter

  person_filter:
    template: /people/{person_id}/filters/{id}
    route: /people/<int:person_id>/filters/<int:id>
    methods:
      put:
        request:
          authorization:
            - person
          type: application/json
          schema: *filter
        response:
          status: 200
          type: application/json
          schema: *filter

      delete:
        request:
          authorization:
            - person
        response:
          status: 204

  person_identity_feed:
    template: /people/{person_id}/identities/{id}/feed{?per_page,start}
    route: /people/<int:person_id>/identities/<int:id>/feed
    methods:
      get:
        request:
          authorization:
            - person
            - gobo-key
        response:
          type: application/json
          status: 200
          schema:
            type: object
            additionalProperties: false
            required: [ feed, posts, sources ]
            properties:
              feed:
                description: Array of ordered post IDs for this feed. The order depends on the feed being requested.
                type: array
                items:
                  type: integer
              posts:
                description: List of posts that appear somewhere in this feed segment.
                type: array
                items: *post
              post_edges:
                description: List of post references that have a relationship with this identity.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              shares:
                description: List of post references that have share relationships.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              threads:
                description: List of post references that have thread relationships.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              sources:
                description: List of sources that appear somewhere in this feed segment.
                type: array
                items: *source
              next:
                description: token that allows the client to fetch the next page fo the feed.
                type: string

  person_identity_post:
    template: /people/{person_id}/identities/{identity_id}/post/{id}
    route: /people/<int:person_id>/identities/<int:identity_id>/post/<int:id>
    methods:
      get:
        request:
          authorization:
            - person
            - gobo-key
        response:
          type: application/json
          status: 200
          schema:
            type: object
            additionalProperties: false
            required: [ feed, posts, sources ]
            properties:
              feed:
                description: Array of ordered post IDs for this feed.
                type: array
                items:
                  type: integer
              posts:
                description: List of posts that appear somewhere in this feed segment.
                type: array
                items: *post
              post_edges:
                description: List of post references that have a relationship with this identity.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              shares:
                description: List of post references that have share relationships.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              threads:
                description: List of post references that have thread relationships to this post.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              sources:
                description: List of sources that appear somewhere in this feed segment.
                type: array
                items: *source

  person_draft_files:
    template: /people/{person_id}/draft-files
    route: /people/<int:person_id>/draft-files
    methods:
      post:
        request:
          authorization:
            - person
          type: application/json
          schema:
            type: object
            additionalProperties: false
            properties:
              id:
                description: identifier for this draft file.
                type: string
        response:
          status: 201
          type: application/json
          schema: *file

  person_draft_file:
    template: /people/{person_id}/draft-files/{id}
    route: /people/<int:person_id>/draft-files/<id>
    methods:
      post:
        description: "Accepts mutlipart upload of file. Form fields are 'file', 'name', and 'alt'."
        request:
          authorization:
            - person
          type: multipart/form-data
        response:
          status: 200
          type: application/json
          schema: *file
      put:
        request:
          authorization:
            - person
          type: application/json
          schema: *file
        response:
          status: 200
          type: application/json
          schema: *file
      delete:
        request:
          authorization:
            - person
        response:
          status: 204
      get:
        request:
          authorization:
            - public
        response:
          status: 200

  person_drafts:
    template: /people/{person_id}/drafts
    route: /people/<int:person_id>/drafts
    methods:
      post:
        request:
          authorization:
            - person
          type: application/json
          schema: 
            type: object
            additionalProperties: false
            required: [ person_id, store ]
            properties: *draftCore
        response:
          status: 201
          type: application/json
          schema: *draft

  person_draft:
    template: /people/{person_id}/drafts/{id}
    route: /people/<int:person_id>/drafts/<int:id>
    methods:
      put:
        request:
          authorization:
            - person
          type: application/json
          schema: *draft
        response:
          status: 200
          type: application/json
          schema: *draft
    delete:
      request:
        authorization:
          - person
      response:
        status: 204

  person_proofs:
    template: /people/{person_id}/proofs
    route: /people/<int:person_id>/proofs
    methods:
      post:
        request:
          authorization:
            - person
          type: application/json
          schema: 
            type: object
            additionalProperties: false
            required: [ person_id, content, files ]
            properties: *proofCore
        response:
          status: 201
          type: application/json
          schema: *proof

  person_draft:
    template: /people/{person_id}/proofs/{id}
    route: /people/<int:person_id>/proofs/<int:id>
    methods:
      put:
        request:
          authorization:
            - person
          type: application/json
          schema: *proof
        response:
          status: 200
          type: application/json
          schema: *proof
    delete:
      request:
        authorization:
          - person
      response:
        status: 204

  person_delivery_target:
    template: /people/{person_id}/delivery-targets/{id}
    route: /people/<int:person_id>/delivery-targets/<int:id>
    methods:
      get:
        request:
          authorization:
            - person
        response:
          status: 200
          type: application/json
          schema: *deliveryTarget
      post:
        request:
          authorization:
            - person
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [ action ]
            properties:
              action:
                description: action to apply to this delivery target
                type: string
        response:
          status: 204

  person_deliveries:
    template: /people/{person_id}/deliveries{?per_page,start}
    route: /people/<int:person_id>/deliveries
    methods:
      post:
        request:
          authorization:
            - person
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [ draft_id, proof_id ]
            properties:
              draft_id:
                description: The ID of the draft to associate with this delivery.
                type: integer
              proof_id:
                description: The ID of the proof to associate with this delivery.
                type: integer
        response:
          status: 201
          type: application/json
          schema: *deliveryGraph

      get:
        request:
          authorization:
            - person  
        response:
          status: 200
          type: application/json
          schema: *deliveryGraph


  person_delivery:
    template: /people/{person_id}/deliveries/{id}
    route: /people/<int:person_id>/deliveries/<int:id>
    methods:
      get:
        request:
          authorization:
            - person
        response:
          status: 200
          type: application/json
          schema: *deliveryGraph
      post:
        request:
          authorization:
            - person
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [ action ]
            properties:
              action:
                description: action to apply to this delivery
                type: string
        response:
          status: 204

  person_posts:
    template: /people/{person_id}/posts
    route: /people/<int:person_id>/posts
    methods:
      post:
        request:
          authorization:
            - person
          type: application/json
          schema: *newPost
        response:
          status: 201
          type: application/json
          schema: *deliveryGraph

  person_post_edge:
    template: /people/{person_id}/post-edges/{identity_id}/{post_id}/{name}
    route: /people/<int:person_id>/post-edges/<int:identity_id>/<int:post_id>/<name>
    methods:
      put:
        request:
          authorization:
            - person
        response:
          status: 204

      delete:
        request:
          authorization:
            - person
        response:
          status: 204

  person_notifications:
    template: /people/{person_id}/identities/{id}/notifications{?per_page,start,view}
    route: /people/<int:person_id>/identities/<int:id>/notifications
    methods:
      get:
        request:
          authorization:
            - person
            - gobo-key
        response:
          type: application/json
          status: 200
          schema:
            type: object
            additionalProperties: false
            required: [ feed, notifications, posts, sources ]
            properties:
              feed:
                description: Array of ordered notification IDs for this feed.
                type: array
                items:
                  type: integer
              notifications:
                description: List of notifications that appear somewhere in this feed segment.
                type: array
                items: *notification
              posts:
                description: List of posts that appear somewhere in this feed segment.
                type: array
                items: *post
              post_edges:
                description: List of post references that have a relationship with this identity.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              shares:
                description: List of post references that have share relationships.
                type: array
                items:
                  type: array
                  items:
                    type: integer
              sources:
                description: List of sources that appear somewhere in this feed segment.
                type: array
                items: *source
              next:
                description: token that allows the client to fetch the next page fo the feed.
                type: string


  person_notification:
    template: /people/{person_id}/identities/{identity_id}/notifications/{id}
    route: /people/<int:person_id>/identities/<int:identity_id>/notifications/<int:id>
    methods:
      post:
        request:
          authorization:
            - person
            - gobo-key
        response:
          type: application/json
          status: 200
          schema: *notification

  person_notification_count:
    template: /people/{person_id}/notification-count
    route: /people/<int:person_id>/notification-count
    methods:
      get:
        request:
          authorization:
            - person
            - gobo-key
        response:
          type: application/json
          status: 200
          schema: *notificationCount

      put:
        request:
          authorization:
            - person
            - gobo-key
          type: application/json
          schema: *notificationCount
        response:
          type: application/json
          status: 200
          schema: *notificationCount
       

  action_onboard_identity_start:
    template: /actions/onboard-identity
    route: /actions/onboard-identity
    methods:
      post:
        request:
          authorization:
            - general
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [ platform, base_url ]
            properties:
              <<: *platform
              base_url:
                description: The base URL that identifies the target social media provider.
                type: string

        response:
          type: application/json
          status: 200
          schema:
            type: object
            additionalProperties: false
            properties:
              redirect_url:
                description: The URL the GOBO client should redirect the browser so the person may login
                type: string
              state:
                description: For Bluesky, we don't make use of a redirect flow. Use this nonce to give us some flow integrity. 

  action_onboard_identity_callback:
    template: /actions/onboard-identity-callback
    route: /actions/onboard-identity-callback
    methods:
      post:
        request:
          authorization:
            - general
          type: application/json
          schema:
            type: object
            additionalProperties: false
            required: [ platform, base_url ]
            properties:
              <<: *platform
              base_url:
                description: The base URL that identifies the target social media provider.
                type: string
              code:
                description: Required for Reddit and Mastodon. Querystring parameter provided in the authentication callback.
                type: string 
              state:
                description: Required for Bluesky and Reddit. Querystring parameter provided in the authentication callback.
                type: string
              bluesky_login:
                description: >
                  Required for Bluesky. The login identifier for this person's account on Bluesky. Example: person.bsky.social
                type: string
              bluesky_secret:
                description: >
                  Required for Bluesky. An "App Password" created for GOBO. Do NOT put root password here.
                type: string

        response:
          status: 200
          type: application/json
          schema: *identity


  action_resend_email_verification:
    template: /actions/people/{person_id}/resend-email-verification
    route: /actions/people/<int:person_id>/resend-email-verification
    methods:
      post:
        request:
          authorization:
            - person
        response:
          status: 204